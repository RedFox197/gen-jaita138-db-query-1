Livello 1: Interrogazioni di Base

1. Recupera tutti gli utenti registrati nel sistema.

SELECT * FROM Utenti;

2. Recupera il nome, cognome e email di tutti gli utenti iscritti dopo il 1° marzo 2024.

SELECT nome, cognome, email FROM Utenti WHERE data_iscrizione > '2024-03-01';

3. Recupera tutti gli articoli insieme al nome e cognome dell'autore.

SELECT a.*, u.nome, u.cognome FROM Articoli a JOIN Utenti u ON a.id_utente = u.id_utente;

4. Recupera i titoli degli articoli pubblicati nel mese di maggio 2024.

SELECT titolo FROM Articoli WHERE MONTH(data_pubblicazione) = 8 AND YEAR(data_pubblicazione) = 2024;

5. Recupera le prime 5 categorie ordinate alfabeticamente per nome.

SELECT * FROM Categorie ORDER BY nome_categoria ASC LIMIT 5;

6. Recupera gli articoli che appartengono alla categoria 'Tecnologia'.

Fatto così solo per buttarci un secondo join perché forse lo scopo era vedere anche se sapevamo pensarla con il doppio:
SELECT a.* FROM Articoli a JOIN Articoli_Categorie ac ON a.id_articolo = ac.id_articolo JOIN Categorie c ON c.id_categoria = ac.id_categoria WHERE c.nome_categoria = 'Tecnologia';

In alternativa:
SELECT a.* FROM Articoli a JOIN Articoli_Categorie ac ON a.id_articolo = ac.id_articolo WHERE ac.id_categoria = 1;

7. Recupera le email degli utenti che hanno scritto almeno un articolo.

SELECT DISTINCT u.email FROM Utenti u LEFT JOIN Articoli a ON u.id_utente = a.id_utente WHERE a.id_utente IS NOT NULL;

8. Recupera tutti gli articoli pubblicati tra il 1° giugno 2024 e il 31 agosto 2024.

SELECT * FROM Articoli WHERE data_pubblicazione BETWEEN '2024-06-01' AND '2024-08-31';

9. Recupera i dettagli delle categorie associate all'articolo con `id_articolo` = 10.

Per dettagli credo intenda la descrizione
SELECT c.descrizione FROM Categorie c JOIN Articoli_Categorie ac ON ac.id_categoria = c.id_categoria WHERE ac.id_articolo = 10;

10. Recupera i nomi degli utenti ordinati per data di iscrizione più recente.

SELECT nome FROM Utenti ORDER BY data_iscrizione DESC;

---------------------------------------------------------------

Livello 2: Interrogazioni Intermedie

1. Conta il numero di articoli scritti da ogni utente.

Fatta così solo per il JOIN
SELECT COUNT(a.id_utente) FROM Articoli a JOIN Utenti u ON a.id_utente = u.id_utente GROUP BY a.id_utente;

In alternativa:
SELECT COUNT(a.id_utente) FROM Articoli a GROUP BY a.id_utente;
     
2. Trova la categoria con il maggior numero di articoli associati.

SELECT c.*, COUNT(c.id_categoria) AS nArt FROM Categorie c JOIN Articoli_Categorie ac ON ac.id_categoria = c.id_categoria GROUP BY c.id_categoria ORDER BY nArt DESC LIMIT 1;

3. Recupera gli utenti che hanno scritto più di 2 articoli.

SELECT u.*, COUNT(a.id_utente) AS articoli FROM Articoli a JOIN Utenti u ON a.id_utente = u.id_utente GROUP BY a.id_utente HAVING articoli > 2;

4. Calcola la data di pubblicazione più recente per ogni categoria.

SELECT c.id_categoria, MAX(a.data_pubblicazione) FROM Categorie c JOIN Articoli_Categorie ac ON c.id_categoria = ac.id_categoria JOIN Articoli a ON ac.id_articolo = a.id_articolo GROUP BY c.id_categoria;

5. Trova il numero medio di articoli per utente.

La mia idea era:
SELECT AVG(COUNT(a.id_utente)) FROM Articoli a GROUP BY a.id_utente;

Ma non funziona. Documentandomi in rete ho letto che non posso mettere una funzione di aggregazione dentro un'altra e dicevano di usare le subquery e ho fatto così
SELECT AVG(conto) FROM (SELECT COUNT(id_utente) as conto FROM Articoli GROUP BY id_utente) SUBQUERY;

6. Recupera le categorie che hanno almeno 3 articoli associati.

SELECT c.*, COUNT(c.id_categoria) AS nArt FROM Categorie c JOIN Articoli_Categorie ac ON ac.id_categoria = c.id_categoria GROUP BY c.id_categoria HAVING nArt >= 3;

7. Calcola il totale degli articoli pubblicati per ogni mese del 2024.

SELECT MONTH(data_pubblicazione), COUNT(*) FROM Articoli WHERE YEAR(data_pubblicazione) = 2024 GROUP BY MONTH(data_pubblicazione);

8. Trova l'utente che ha la data di iscrizione più antica.

SELECT * FROM Utenti ORDER BY data_iscrizione ASC LIMIT 1;

9. Recupera le categorie e il numero di articoli associati a ciascuna, ordinati dal più al meno.

SELECT c.*, COUNT(c.id_categoria) AS nArt FROM Categorie c JOIN Articoli_Categorie ac ON ac.id_categoria = c.id_categoria GROUP BY c.id_categoria ORDER BY nArt DESC;

10. Calcola il numero totale di articoli pubblicati da utenti iscritti nel 2024.

SELECT COUNT(a.id_articolo) FROM Articoli a JOIN Utenti u ON a.id_utente = u.id_utente WHERE YEAR(u.data_iscrizione) = 2024;

---------------------------------------------------------------

Livello 3: Bonus

1. Recupera gli utenti che non hanno scritto nessun articolo.

SELECT u.* FROM Utenti u LEFT JOIN Articoli a ON a.id_utente = u.id_utente WHERE a.id_utente IS NULL;

2. Trova le categorie che non hanno alcun articolo associato.

SELECT c.* FROM Categorie c LEFT JOIN Articoli_Categorie ac ON c.id_categoria = ac.id_categoria WHERE ac.id_categoria IS NULL;

3. Trova le categorie che contengono articoli scritti da utenti iscritti prima del 2024.

SELECT DISTINCT c.* FROM Categorie c JOIN Articoli_Categorie ac ON ac.id_categoria = c.id_categoria JOIN Articoli a ON a.id_articolo = ac.id_articolo JOIN Utenti u ON u.id_utente = a.id_utente WHERE YEAR(u.data_iscrizione) < 2024;

4. Recupera le categorie che sono associate ad almeno 3 articoli pubblicati nel 2024.

volevo mette c.*, ma mi dà errore
SELECT c.id_categoria, COUNT(*) FROM Categorie c JOIN Articoli_Categorie ac ON ac.id_categoria = c.id_categoria JOIN Articoli a ON ac.id_articolo = a.id_articolo WHERE YEAR(a.data_pubblicazione) = 2024 GROUP BY c.id_categoria HAVING COUNT(*) >= 3;